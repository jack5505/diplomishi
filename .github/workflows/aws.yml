# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "ap-south-1"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: '21'


    - name: Build and package with Maven
      run: mvn clean package
      env:
        MAVEN_OPTS: -Dmaven.test.skip=true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: repo
      run: |
        docker build -t  start_up .
        docker tag start_up $ECR_REGISTRY/$ECR_REPOSITORY
        docker push $ECR_REGISTRY/$ECR_REPOSITORY 
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: SSH to EC2 and deploy
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_INSTANCE_IP: ${{ secrets.EC2_INSTANCE_IP }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
            echo "$EC2_SSH_KEY" > ec2_key.pem
            chmod 600 ec2_key.pem
            ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@$EC2_INSTANCE_IP << 'EOF'
                      # Install AWS CLI if not installed
            if ! command -v aws &> /dev/null
            then
              echo "AWS CLI not found, installing..."
              sudo apt-get update && sudo apt-get install -y awscli
            fi
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 211125601102.dkr.ecr.ap-south-1.amazonaws.com
            # Pull the new Docker image
            sudo docker pull  211125601102.dkr.ecr.ap-south-1.amazonaws.com/repo:latest 
            sudo docker stop start_up | true
            sudo docker system prune -f | true
            sudo docker run -e "SPRING_PROFILES_ACTIVE=dev" -e TZ=Asia/Karachi  --name=start_up -d -p 8080:8080 211125601102.dkr.ecr.ap-south-1.amazonaws.com/repo:latest
            echo "everything is done so far SUCCESS"
            echo "clean from not needed images of server"
            sudo docker images -f "dangling=true" | true
            sudo docker image prune -f | true
            echo "clean not needed images"


